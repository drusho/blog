{
  
    
        "post0": {
            "title": "Data Analysis of Reddit's /r/Politics",
            "content": ". . Notebook Created by David Rusho . Github Repository for this Notebook . | Other Social Media Links: . Twitter | Github | Linkedin | Tableau . | . . Introduction . About the Data . What is Reddit? . . Reddit is an American social news aggregation, web content rating, and discussion website. Registered members submit content to the site such as links, text posts, images, and videos, which are then voted up or down by other members. . . Subreddits . . Posts are organized by subject into user-created boards called &quot;communities&quot; or &quot;subreddits&quot;, which cover a variety of topics such as news, politics, religion, science, movies, video games, music, books, sports, fitness, cooking, pets, and image-sharing. . . Upvotes/Downvotes . . Submissions with more up-votes appear towards the top of their subreddit and, if they receive enough up-votes, ultimately on the site&#39;s front page . . Subreddit Tabs . . At the top of each page on Reddit, you will see a selection of tabs marked Hot, New, Rising, Controversial, Top, Gilded, and Wiki. . Hot posts are the posts that have been getting the most upvotes and comments recently on that subreddit. This is the tab that will be used for this notebook. . Project Goals . This notebook will focus on &#39;Hot&#39; subreddit tab posts due to their focus on upvotes and recent comments. Data from /r/politics will be scrapped using python library Praw. Analysis will include determining top posts for this subreddit and understanding what factors contributed to their ranking beyond most upvotes and comments. Such as the correlation between comments and points, word frequency and semantic analysis of post titles . Summary of Results . Correlation of Post Score and Number of Comments . . A heatmap that was ran through Seaborn showed there was a very positive correlation between the number of comments and the score of a posts (0.89). . . Word Frequency of Post Titles . . Word frequency showed that Biden and Trump were the most popular key words, followed by GOP. . . Sentiment Analysis . The majority of posts in /r/politics were found be neutral, followed by negative. . Data Collection and Cleaning . Import Libraries . !pip install praw !pip install vaderSentiment !pip install texthero . . from configparser import ConfigParser import datetime as dt import matplotlib.pyplot as plt import numpy as np import pandas as pd import plotly.express as px import plotly.graph_objects as go import praw import seaborn as sns import texthero as herofrom from texthero import preprocessing from texthero import stopwords from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer import warnings warnings.filterwarnings(&#39;ignore&#39;) . . Praw (Reddit API) Setup . # praw setup reddit = praw.Reddit(client_id = cid, #peronal use script client_secret = csec, #secret token usernme = username, #profile username password = password, #profile password user_agent = ua, #user agent check_for_async=False) . . Organize and Clean Data . Scrap 500 Reddit Posts from /r/poltics from &#39;Hot&#39; tab. . # list for df conversion posts = [] # select a subreddit to scrape sub = &#39;politics&#39; # return 500 new posts new_bets = reddit.subreddit(sub).hot(limit=500) # return selected reddit post attributes for post in new_bets: posts.append([post.title, post.selftext, post.score, post.upvote_ratio, post.num_comments, post.created_utc, post.is_original_content, post.url]) # create df, rename columns, and make dtype for all data a str posts = pd.DataFrame(posts, columns=[&#39;title&#39;, &#39;post&#39;, &#39;score&#39;, &#39;upvote_ratio&#39;, &#39;comments&#39;, &#39;created&#39;, &#39;original_content&#39;, &#39;url&#39;], dtype=&#39;str&#39;) posts.sample(3) . . title post score upvote_ratio comments created original_content url . 428 A judge blocked Florida Gov. Ron DeSantis&#39; &#39;de... | | 1563 | 0.98 | 107 | 1625166787.0 | False | https://www.businessinsider.com/florida-ron-de... | . 483 Garland orders halt to any further federal exe... | | 147 | 0.92 | 1 | 1625182268.0 | False | https://abcnews.go.com/Politics/garland-orders... | . 218 Biden administration formally launches effort ... | | 3784 | 0.98 | 245 | 1625270143.0 | False | https://www.inquirer.com/news/nation-world/bid... | . Column Descriptions . Heading Description . title | The title of the submission. | . post | The submissions’ selftext - an empty string if a link post. | . score | The number of upvotes for the submission. | . upvote_ratio | The percentage of upvotes from all votes on the submission. | . comments | The number of comments on the submission. | . created | Time the submission was created, represented in Unix Time. | . original_content | Whether or not the submission has been set as original content. | . url | The URL the submission links to, or the permalink if a selfpost. | . Change &#39;created&#39; Column Dtype to datetime . # created timestamp column to represent correct created column data posts[&#39;created&#39;] = pd.to_datetime(posts[&#39;created&#39;], unit=&#39;s&#39;) posts[&#39;created&#39;].head(1) . 0 2021-07-05 16:00:02 Name: created, dtype: datetime64[ns] . . Show Dataframe Dtypes . # change dytpe of score and comments cols to int posts[[&#39;comments&#39;,&#39;score&#39;]] = posts[[&#39;comments&#39;,&#39;score&#39;]].astype(&#39;int&#39;) posts[&#39;upvote_ratio&#39;] = posts[&#39;upvote_ratio&#39;].astype(&#39;float&#39;) . . posts.info() . . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 500 entries, 0 to 499 Data columns (total 8 columns): # Column Non-Null Count Dtype -- -- 0 title 500 non-null object 1 post 500 non-null object 2 score 500 non-null int64 3 upvote_ratio 500 non-null float64 4 comments 500 non-null int64 5 created 500 non-null datetime64[ns] 6 original_content 500 non-null object 7 url 500 non-null object dtypes: datetime64[ns](1), float64(1), int64(2), object(4) memory usage: 31.4+ KB . Clean Post Titles (NLP Preprossing) . #Clean post titles using texthero posts[&#39;clean_title&#39;] = herofrom.clean(posts[&#39;title&#39;]) posts[&#39;clean_title&#39;].sample(3) . . 497 nancy pelosi signals hard line formation janua... 430 foreign media skewer joe biden &#39;barely cogent ... 281 biden administration freezes u assets myanmar ... Name: clean_title, dtype: object . Data Exploration . Top 10 Popular Posts by Score . # Top 10 Popular posts based on score top_posts = posts.groupby([&#39;title&#39;])[&#39;score&#39;,&#39;upvote_ratio&#39;].sum().sort_values(by=&#39;score&#39;,ascending=False).reset_index() top_posts[[&#39;score&#39;,&#39;upvote_ratio&#39;,&#39;title&#39;]].head(3) . . score upvote_ratio title . 0 59394 | 0.82 | Charles Booker makes it official, announces ru... | . 1 56462 | 0.89 | Dominion has subpoenaed Rudy Giuliani, Sidney ... | . 2 51924 | 1.83 | Biden says teachers deserve ‘a raise, not just... | . Word Frequency of Post Titles (Wordcloud) . # Word cloud of top words from clean_title herofrom.wordcloud(posts.clean_title, max_words=200, contour_color=&#39;&#39;, background_color=&#39;white&#39;, colormap=cmaps, height = 500, width=800) . . Top 25 Words From Post Titles (Bar Plot) . # create new dateframe of top words tw = herofrom.visualization.top_words(posts[&#39;clean_title&#39;]).head(20).to_frame() tw.reset_index(inplace=True) tw.rename(columns={&#39;index&#39;:&#39;word&#39;,&#39;clean_title&#39;:&#39;freq&#39;},inplace=True) #remove word less than 2 chars tw2 = tw[tw[&#39;word&#39;].str.len() &gt;=2] tw2 = tw2.sort_values(by=&#39;freq&#39;,ascending=False) tw2.head(3) . . word freq . 0 biden | 85 | . 1 trump | 67 | . 2 gop | 43 | . Word Frequency of Post Titles (Bar Plot) . # Top 25 Words From Post Titles fig = go.Figure([go.Bar(x=tw2.word, y=tw2.freq, textposition=&#39;auto&#39;)]) fig.update_layout(wtbckgnd, #set background to white title={&#39;text&#39;: f&#39;Top 25 Words in /r/politics Post Titles ({today})&#39;, &#39;y&#39;:0.88,&#39;x&#39;:0.5,&#39;xanchor&#39;: &#39;center&#39;,&#39;yanchor&#39;: &#39;top&#39;}, yaxis=dict(title=&#39;Word Count&#39;)) fig.update_traces(marker_color=mcolors) #set market colors to light blue fig.show() . . . . Post Scores vs Comments (Scatter Plot) . # Post Scores vs Comments fig = go.Figure(data=go.Scatter(x=posts.comments, y=posts.score, mode=&#39;markers&#39;, text=posts.title)) # hover text goes here fig.update_layout(wtbckgnd, #set background to white title={&#39;text&#39;: f&quot;/r/politics Posts&#39; Scores vs Comments ({today})&quot;, &#39;y&#39;:0.88,&#39;x&#39;:0.5,&#39;xanchor&#39;: &#39;center&#39;,&#39;yanchor&#39;: &#39;top&#39;}, xaxis_title=&quot;Post Score&quot;, yaxis_title=&quot;No. of Comments&quot;,) fig.update_traces(marker_color=mcolors) #set market colors to light blue fig.show() . . . . Post Scores by Post Counts (Histrogram Plot) . fig = px.histogram(posts, x=&quot;score&quot;) fig.update_layout(wtbckgnd, #set background to white title={&#39;text&#39;: f&#39;Post Scores by Post Counts&#39;, &#39;y&#39;:0.88,&#39;x&#39;:0.5,&#39;xanchor&#39;: &#39;center&#39;,&#39;yanchor&#39;: &#39;top&#39;}, yaxis=dict(title=&#39;Post Count&#39;), xaxis=dict(title=&#39;Post Score&#39;)) fig.update_traces(marker_color=mcolors) #set market colors to light blue fig.show() . . . . Sentiment Analysis of Post Titles . Scale for determining sentiment . positive: compound score&gt;=0.05 neutral: compound score between -0.05 and 0.05 negative: compound score&lt;=-0.05 . #Sentiment Analysis of Post Titles analyzer = SentimentIntensityAnalyzer() posts[&#39;neg&#39;] = posts[&#39;title&#39;].apply(lambda x:analyzer.polarity_scores(x)[&#39;neg&#39;]) posts[&#39;neu&#39;] = posts[&#39;title&#39;].apply(lambda x:analyzer.polarity_scores(x)[&#39;neu&#39;]) posts[&#39;pos&#39;] = posts[&#39;title&#39;].apply(lambda x:analyzer.polarity_scores(x)[&#39;pos&#39;]) posts[&#39;compound&#39;] = posts[&#39;title&#39;].apply(lambda x:analyzer.polarity_scores(x)[&#39;compound&#39;]) posts[[&#39;title&#39;,&#39;neg&#39;,&#39;neu&#39;,&#39;pos&#39;,&#39;compound&#39;]].sample(3) . . title neg neu pos compound . 392 Biden struggles to answer Russia question at p... | 0.200 | 0.800 | 0.000 | -0.3612 | . 354 Child tax credit checks will start arriving th... | 0.000 | 0.794 | 0.206 | 0.3818 | . 271 Trump under fire for provocative email to supp... | 0.147 | 0.675 | 0.178 | 0.1280 | . Create Sentiment Column Using Compound Numbers . # sentiment col def sentiment(compscore): if compscore &gt;= 0.05: return &#39;positive&#39; elif -0.05 &lt; compscore &lt; 0.05: return &#39;neutral&#39; elif compscore &lt;=-0.05: return &#39;negative&#39; posts[&#39;sentiment&#39;] = posts.compound.apply(sentiment) posts[[&#39;title&#39;,&#39;neg&#39;,&#39;neu&#39;,&#39;pos&#39;,&#39;compound&#39;,&#39;sentiment&#39;]].sample(3) . . title neg neu pos compound sentiment . 126 Op-Ed: What does it mean to be American? Ask a... | 0.000 | 1.000 | 0.000 | 0.0000 | neutral | . 11 Want Better Policing? Make It Easier To Fire B... | 0.330 | 0.279 | 0.391 | 0.0258 | neutral | . 176 They kept the wheels on democracy as Trump tri... | 0.158 | 0.842 | 0.000 | -0.4939 | negative | . Sentiment of Post Titles (Histogram Plot) . # posts.sentiment.value_counts().to_frame().reset_index() fig = px.histogram(posts, x=&quot;compound&quot;, color=&quot;sentiment&quot;, # color_discrete_sequence= px.colors.sequential.Blues color_discrete_sequence=[&quot;#1f77b4&quot;, &quot;#97C3E1&quot;, &quot;#559ACA&quot;]) fig.update_layout(wtbckgnd, #set background to white title={&#39;text&#39;: f&quot;Sentiment of /r/politics Posts ({today})&quot;, &#39;y&#39;:0.95,&#39;x&#39;:0.5,&#39;xanchor&#39;: &#39;center&#39;,&#39;yanchor&#39;: &#39;top&#39;}, xaxis_title=&quot;Compound Score&quot;, yaxis_title=&quot;No. of Posts&quot;,) # fig.update_traces(marker_color=mcolors) #set market colors to light blue . . . . Post Scores vs Compound Sentiment Score (Scatter Plot) . # Post Scores vs Compound Sentiment Score fig = go.Figure(data=go.Scatter(x=posts.compound, y=posts.score, mode=&#39;markers&#39;, text=posts.title)) # hover text goes here fig.update_layout(wtbckgnd, #set background to white title={&#39;text&#39;: &quot;/r/politics Posts&#39; Scores vs Comments&quot;, &#39;y&#39;:0.88,&#39;x&#39;:0.5,&#39;xanchor&#39;: &#39;center&#39;,&#39;yanchor&#39;: &#39;top&#39;}, xaxis_title=&quot;Compound Sentiment Score&quot;, yaxis_title=&quot;Scores&quot;,) fig.update_traces(marker_color=mcolors) #set market colors to light blue fig.show() . . . . Correlation of Dataframe (Heatmap) . Note *Plotly currently doesn&#39;t have simple solution for using dataframes directly with heatmaps. . # Heatmap of Dataframe mask = np.triu(np.ones_like(posts.corr(), dtype=np.bool))# adjust mask and df mask = mask[1:, :-1] corr = posts.corr().iloc[1:,:-1].copy()# plot heatmap fig, ax = plt.subplots(figsize=(11, 9)) sb.heatmap(corr, mask=mask, annot=True, fmt=&quot;.2f&quot;, cmap=&#39;Blues&#39;, vmin=-1, vmax=1, cbar_kws={&quot;shrink&quot;: .8})# yticks plt.yticks(rotation=0) plt.show() . . Conclusion . Correlation of Post Score and Number of Comments . Heatmap run through Seaborn showed there was a very positive correlation between the number of comments and the score of a posts (0.89). . . Word Frequency of Post Titles . Word frequency showed that presidents Biden and Trump were the most popular key words, followed by &#39;GOP&#39;. . . Sentiment Analysis . The Majority of posts in /r/politics were found be Neutral, followed by negative. . Resources . PRAW: The Python Reddit API Wrapper . | Ultimate Beginners Guide to Collecting Text for Natural Language Processing (NLP) with Python — Twitter, Reddit, Genius and More Collect Text through APIs and Web Scraping . | How to scrape Reddit with Python . | Try TextHero: The Absolute Simplest way to Clean and Analyze Text in Pandas . | How to Use Texthero to Prepare a Text-based Dataset for Your NLP Project . | How to Run Sentiment Analysis in Python using VADER . | How to read and write configuration (.ini) file in python . | Understanding Reddit: A beginner’s guide to the front page of the internet . | Tools Used . Pandas | Plotly | Praw (reddit api tool) 4.Texthero (NLP tool) |",
            "url": "https://drusho.github.io/api/nlp/pandas/plotly/texthero/praw/reddit/2021/07/05/reddit-politics-eda.html",
            "relUrl": "/api/nlp/pandas/plotly/texthero/praw/reddit/2021/07/05/reddit-politics-eda.html",
            "date": " • Jul 5, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "My name is David Rusho. I have a passion for using data to tell stories and discover meaningful insights. I started programming almost accidentally while looking for methods to automate repetitive tasks at work. I am an advanced spreadsheet formulas user and found that transitioning to writing code in python was a natural next step in my data science journey. . Currently, I’m based out of Orlando, FL, where I am currently enrolled in an MS Data Analytics (Big Data) program at the University of Central Florida. When I’m not programming or reading about Data Science, you can usually find me playing with photography, practicing yoga, or learning to cook Korean/Indian food. .",
          "url": "https://drusho.github.io/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Dashboards",
          "content": ". Tableau . . World COVID-19 Tracking Dashboard (12/2019 - 06/2020) . | US Firework Injuries (2016-2021) Dashboard | Florida Schools (2020-2021) COVID-19 Dashboard |",
          "url": "https://drusho.github.io/dashboards/",
          "relUrl": "/dashboards/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Home",
          "content": "",
          "url": "https://drusho.github.io/",
          "relUrl": "/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://drusho.github.io/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}
{
  
    
        "post0": {
            "title": "Data Analysis of Reddit's /r/Politics",
            "content": ". . Notebook Created by David Rusho . Github Repository for this Notebook . | Other Social Media Links: . Twitter | Github | Linkedin | Tableau . | . . Introduction . About the Data . What is Reddit? . . Reddit is an American social news aggregation, web content rating, and discussion website. Registered members submit content to the site such as links, text posts, images, and videos, which are then voted up or down by other members. . . Subreddits . . Posts are organized by subject into user-created boards called &quot;communities&quot; or &quot;subreddits&quot;, which cover a variety of topics such as news, politics, religion, science, movies, video games, music, books, sports, fitness, cooking, pets, and image-sharing. . . Upvotes/Downvotes . . Submissions with more up-votes appear towards the top of their subreddit and, if they receive enough up-votes, ultimately on the site&#39;s front page . . Subreddit Tabs . . At the top of each page on Reddit, you will see a selection of tabs marked Hot, New, Rising, Controversial, Top, Gilded, and Wiki. . Hot posts are the posts that have been getting the most upvotes and comments recently on that subreddit. This is the tab that will be used for this notebook. . Project Goals . This notebook will focus on &#39;Hot&#39; subreddit tab posts due to their focus on upvotes and recent comments. Data from /r/politics will be scrapped using python library Praw. Analysis will include determining top posts for this subreddit and understanding what factors contributed to their ranking beyond most upvotes and comments. Such as the correlation between comments and points, word frequency and semantic analysis of post titles . Summary of Results . Correlation of Post Score and Number of Comments . . A heatmap that was ran through Seaborn showed there was a very positive correlation between the number of comments and the score of a posts (0.89). . . Word Frequency of Post Titles . . Word frequency showed that Biden and Trump were the most popular key words, followed by GOP. . . Sentiment Analysis . The majority of posts in /r/politics were found be neutral, followed by negative. . Data Collection and Cleaning . Import Libraries . !pip install praw !pip install vaderSentiment !pip install texthero . . from configparser import ConfigParser import datetime as dt import matplotlib.pyplot as plt import numpy as np import pandas as pd import plotly.express as px import plotly.graph_objects as go import praw import seaborn as sns import texthero as herofrom from texthero import preprocessing from texthero import stopwords from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer import warnings warnings.filterwarnings(&#39;ignore&#39;) . . Praw (Reddit API) Setup . # praw setup reddit = praw.Reddit(client_id = cid, #peronal use script client_secret = csec, #secret token usernme = username, #profile username password = password, #profile password user_agent = ua, #user agent check_for_async=False) . . Organize and Clean Data . Scrap 500 Reddit Posts from /r/poltics from &#39;Hot&#39; tab. . # list for df conversion posts = [] # select a subreddit to scrape sub = &#39;politics&#39; # return 500 new posts new_bets = reddit.subreddit(sub).hot(limit=500) # return selected reddit post attributes for post in new_bets: posts.append([post.title, post.selftext, post.score, post.upvote_ratio, post.num_comments, post.created_utc, post.is_original_content, post.url]) # create df, rename columns, and make dtype for all data a str posts = pd.DataFrame(posts, columns=[&#39;title&#39;, &#39;post&#39;, &#39;score&#39;, &#39;upvote_ratio&#39;, &#39;comments&#39;, &#39;created&#39;, &#39;original_content&#39;, &#39;url&#39;], dtype=&#39;str&#39;) posts.sample(3) . . title post score upvote_ratio comments created original_content url . 428 A judge blocked Florida Gov. Ron DeSantis&#39; &#39;de... | | 1563 | 0.98 | 107 | 1625166787.0 | False | https://www.businessinsider.com/florida-ron-de... | . 483 Garland orders halt to any further federal exe... | | 147 | 0.92 | 1 | 1625182268.0 | False | https://abcnews.go.com/Politics/garland-orders... | . 218 Biden administration formally launches effort ... | | 3784 | 0.98 | 245 | 1625270143.0 | False | https://www.inquirer.com/news/nation-world/bid... | . Column Descriptions . Heading Description . title | The title of the submission. | . post | The submissions’ selftext - an empty string if a link post. | . score | The number of upvotes for the submission. | . upvote_ratio | The percentage of upvotes from all votes on the submission. | . comments | The number of comments on the submission. | . created | Time the submission was created, represented in Unix Time. | . original_content | Whether or not the submission has been set as original content. | . url | The URL the submission links to, or the permalink if a selfpost. | . Change &#39;created&#39; Column Dtype to datetime . # created timestamp column to represent correct created column data posts[&#39;created&#39;] = pd.to_datetime(posts[&#39;created&#39;], unit=&#39;s&#39;) posts[&#39;created&#39;].head(1) . 0 2021-07-05 16:00:02 Name: created, dtype: datetime64[ns] . . Show Dataframe Dtypes . # change dytpe of score and comments cols to int posts[[&#39;comments&#39;,&#39;score&#39;]] = posts[[&#39;comments&#39;,&#39;score&#39;]].astype(&#39;int&#39;) posts[&#39;upvote_ratio&#39;] = posts[&#39;upvote_ratio&#39;].astype(&#39;float&#39;) . . posts.info() . . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 500 entries, 0 to 499 Data columns (total 8 columns): # Column Non-Null Count Dtype -- -- 0 title 500 non-null object 1 post 500 non-null object 2 score 500 non-null int64 3 upvote_ratio 500 non-null float64 4 comments 500 non-null int64 5 created 500 non-null datetime64[ns] 6 original_content 500 non-null object 7 url 500 non-null object dtypes: datetime64[ns](1), float64(1), int64(2), object(4) memory usage: 31.4+ KB . Clean Post Titles (NLP Preprossing) . #Clean post titles using texthero posts[&#39;clean_title&#39;] = herofrom.clean(posts[&#39;title&#39;]) posts[&#39;clean_title&#39;].sample(3) . . 497 nancy pelosi signals hard line formation janua... 430 foreign media skewer joe biden &#39;barely cogent ... 281 biden administration freezes u assets myanmar ... Name: clean_title, dtype: object . Data Exploration . Top 10 Popular Posts by Score . # Top 10 Popular posts based on score top_posts = posts.groupby([&#39;title&#39;])[&#39;score&#39;,&#39;upvote_ratio&#39;].sum().sort_values(by=&#39;score&#39;,ascending=False).reset_index() top_posts[[&#39;score&#39;,&#39;upvote_ratio&#39;,&#39;title&#39;]].head(3) . . score upvote_ratio title . 0 59394 | 0.82 | Charles Booker makes it official, announces ru... | . 1 56462 | 0.89 | Dominion has subpoenaed Rudy Giuliani, Sidney ... | . 2 51924 | 1.83 | Biden says teachers deserve ‘a raise, not just... | . Word Frequency of Post Titles (Wordcloud) . # Word cloud of top words from clean_title herofrom.wordcloud(posts.clean_title, max_words=200, contour_color=&#39;&#39;, background_color=&#39;white&#39;, colormap=cmaps, height = 500, width=800) . . Top 25 Words From Post Titles (Bar Plot) . # create new dateframe of top words tw = herofrom.visualization.top_words(posts[&#39;clean_title&#39;]).head(20).to_frame() tw.reset_index(inplace=True) tw.rename(columns={&#39;index&#39;:&#39;word&#39;,&#39;clean_title&#39;:&#39;freq&#39;},inplace=True) #remove word less than 2 chars tw2 = tw[tw[&#39;word&#39;].str.len() &gt;=2] tw2 = tw2.sort_values(by=&#39;freq&#39;,ascending=False) tw2.head(3) . . word freq . 0 biden | 85 | . 1 trump | 67 | . 2 gop | 43 | . Word Frequency of Post Titles (Bar Plot) . # Top 25 Words From Post Titles fig = go.Figure([go.Bar(x=tw2.word, y=tw2.freq, textposition=&#39;auto&#39;)]) fig.update_layout(wtbckgnd, #set background to white title={&#39;text&#39;: f&#39;Top 25 Words in /r/politics Post Titles ({today})&#39;, &#39;y&#39;:0.88,&#39;x&#39;:0.5,&#39;xanchor&#39;: &#39;center&#39;,&#39;yanchor&#39;: &#39;top&#39;}, yaxis=dict(title=&#39;Word Count&#39;)) fig.update_traces(marker_color=mcolors) #set market colors to light blue fig.show() . . . . Post Scores vs Comments (Scatter Plot) . # Post Scores vs Comments fig = go.Figure(data=go.Scatter(x=posts.comments, y=posts.score, mode=&#39;markers&#39;, text=posts.title)) # hover text goes here fig.update_layout(wtbckgnd, #set background to white title={&#39;text&#39;: f&quot;/r/politics Posts&#39; Scores vs Comments ({today})&quot;, &#39;y&#39;:0.88,&#39;x&#39;:0.5,&#39;xanchor&#39;: &#39;center&#39;,&#39;yanchor&#39;: &#39;top&#39;}, xaxis_title=&quot;Post Score&quot;, yaxis_title=&quot;No. of Comments&quot;,) fig.update_traces(marker_color=mcolors) #set market colors to light blue fig.show() . . . . Post Scores by Post Counts (Histrogram Plot) . fig = px.histogram(posts, x=&quot;score&quot;) fig.update_layout(wtbckgnd, #set background to white title={&#39;text&#39;: f&#39;Post Scores by Post Counts&#39;, &#39;y&#39;:0.88,&#39;x&#39;:0.5,&#39;xanchor&#39;: &#39;center&#39;,&#39;yanchor&#39;: &#39;top&#39;}, yaxis=dict(title=&#39;Post Count&#39;), xaxis=dict(title=&#39;Post Score&#39;)) fig.update_traces(marker_color=mcolors) #set market colors to light blue fig.show() . . . . Sentiment Analysis of Post Titles . Scale for determining sentiment . positive: compound score&gt;=0.05 neutral: compound score between -0.05 and 0.05 negative: compound score&lt;=-0.05 . #Sentiment Analysis of Post Titles analyzer = SentimentIntensityAnalyzer() posts[&#39;neg&#39;] = posts[&#39;title&#39;].apply(lambda x:analyzer.polarity_scores(x)[&#39;neg&#39;]) posts[&#39;neu&#39;] = posts[&#39;title&#39;].apply(lambda x:analyzer.polarity_scores(x)[&#39;neu&#39;]) posts[&#39;pos&#39;] = posts[&#39;title&#39;].apply(lambda x:analyzer.polarity_scores(x)[&#39;pos&#39;]) posts[&#39;compound&#39;] = posts[&#39;title&#39;].apply(lambda x:analyzer.polarity_scores(x)[&#39;compound&#39;]) posts[[&#39;title&#39;,&#39;neg&#39;,&#39;neu&#39;,&#39;pos&#39;,&#39;compound&#39;]].sample(3) . . title neg neu pos compound . 392 Biden struggles to answer Russia question at p... | 0.200 | 0.800 | 0.000 | -0.3612 | . 354 Child tax credit checks will start arriving th... | 0.000 | 0.794 | 0.206 | 0.3818 | . 271 Trump under fire for provocative email to supp... | 0.147 | 0.675 | 0.178 | 0.1280 | . Create Sentiment Column Using Compound Numbers . # sentiment col def sentiment(compscore): if compscore &gt;= 0.05: return &#39;positive&#39; elif -0.05 &lt; compscore &lt; 0.05: return &#39;neutral&#39; elif compscore &lt;=-0.05: return &#39;negative&#39; posts[&#39;sentiment&#39;] = posts.compound.apply(sentiment) posts[[&#39;title&#39;,&#39;neg&#39;,&#39;neu&#39;,&#39;pos&#39;,&#39;compound&#39;,&#39;sentiment&#39;]].sample(3) . . title neg neu pos compound sentiment . 126 Op-Ed: What does it mean to be American? Ask a... | 0.000 | 1.000 | 0.000 | 0.0000 | neutral | . 11 Want Better Policing? Make It Easier To Fire B... | 0.330 | 0.279 | 0.391 | 0.0258 | neutral | . 176 They kept the wheels on democracy as Trump tri... | 0.158 | 0.842 | 0.000 | -0.4939 | negative | . Sentiment of Post Titles (Histogram Plot) . # posts.sentiment.value_counts().to_frame().reset_index() fig = px.histogram(posts, x=&quot;compound&quot;, color=&quot;sentiment&quot;, # color_discrete_sequence= px.colors.sequential.Blues color_discrete_sequence=[&quot;#1f77b4&quot;, &quot;#97C3E1&quot;, &quot;#559ACA&quot;]) fig.update_layout(wtbckgnd, #set background to white title={&#39;text&#39;: f&quot;Sentiment of /r/politics Posts ({today})&quot;, &#39;y&#39;:0.95,&#39;x&#39;:0.5,&#39;xanchor&#39;: &#39;center&#39;,&#39;yanchor&#39;: &#39;top&#39;}, xaxis_title=&quot;Compound Score&quot;, yaxis_title=&quot;No. of Posts&quot;,) # fig.update_traces(marker_color=mcolors) #set market colors to light blue . . . . Post Scores vs Compound Sentiment Score (Scatter Plot) . # Post Scores vs Compound Sentiment Score fig = go.Figure(data=go.Scatter(x=posts.compound, y=posts.score, mode=&#39;markers&#39;, text=posts.title)) # hover text goes here fig.update_layout(wtbckgnd, #set background to white title={&#39;text&#39;: &quot;/r/politics Posts&#39; Scores vs Comments&quot;, &#39;y&#39;:0.88,&#39;x&#39;:0.5,&#39;xanchor&#39;: &#39;center&#39;,&#39;yanchor&#39;: &#39;top&#39;}, xaxis_title=&quot;Compound Sentiment Score&quot;, yaxis_title=&quot;Scores&quot;,) fig.update_traces(marker_color=mcolors) #set market colors to light blue fig.show() . . . . Correlation of Dataframe (Heatmap) . Note *Plotly currently doesn&#39;t have simple solution for using dataframes directly with heatmaps. . # Heatmap of Dataframe mask = np.triu(np.ones_like(posts.corr(), dtype=np.bool))# adjust mask and df mask = mask[1:, :-1] corr = posts.corr().iloc[1:,:-1].copy()# plot heatmap fig, ax = plt.subplots(figsize=(11, 9)) sb.heatmap(corr, mask=mask, annot=True, fmt=&quot;.2f&quot;, cmap=&#39;Blues&#39;, vmin=-1, vmax=1, cbar_kws={&quot;shrink&quot;: .8})# yticks plt.yticks(rotation=0) plt.show() . . Conclusion . Correlation of Post Score and Number of Comments . Heatmap run through Seaborn showed there was a very positive correlation between the number of comments and the score of a posts (0.89). . . Word Frequency of Post Titles . Word frequency showed that presidents Biden and Trump were the most popular key words, followed by &#39;GOP&#39;. . . Sentiment Analysis . The Majority of posts in /r/politics were found be Neutral, followed by negative. . Resources . PRAW: The Python Reddit API Wrapper . | Ultimate Beginners Guide to Collecting Text for Natural Language Processing (NLP) with Python — Twitter, Reddit, Genius and More Collect Text through APIs and Web Scraping . | How to scrape Reddit with Python . | Try TextHero: The Absolute Simplest way to Clean and Analyze Text in Pandas . | How to Use Texthero to Prepare a Text-based Dataset for Your NLP Project . | How to Run Sentiment Analysis in Python using VADER . | How to read and write configuration (.ini) file in python . | Understanding Reddit: A beginner’s guide to the front page of the internet . | Tools Used . Pandas | Plotly | Praw (reddit api tool) 4.Texthero (NLP tool) |",
            "url": "https://drusho.github.io/api/nlp/pandas/plotly/texthero/praw/reddit/2021/07/05/reddit-politics-eda.html",
            "relUrl": "/api/nlp/pandas/plotly/texthero/praw/reddit/2021/07/05/reddit-politics-eda.html",
            "date": " • Jul 5, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "US Firework Sales and Injuries (Part 2)",
            "content": ". . Notebook Created by David Rusho . Github Repository for this Notebook . Tableau Dashboard for Fireworks Inuries (2016-2021) . . Other Social Media Links: . Twitter | Github | Linkedin | Tableau . . Introduction . Fireworks in the US are commonly used during the 4th of July and New Years&#39; celebrations. Besides being nice to look at fireworks also cause a lot of apparent problems. . Fires . &quot;More than one-quarter (28 percent) of fires started by fireworks in 2014–2018 were reported on the Fourth of July.&quot; . Personal Injury . &quot;The Consumer Product Safety Commission (CPSC) estimates that 9,100 consumer fireworks-related injuries were seen in US hospital emergency departments in 2018.&quot; . Project Goals . To provide an overview of the types of incidents that involve fireworks. This includes understanding which age groups are most affected and the frequency of injury types. Insights from this analysis may help prevent future injuries or at least assist with increasing awareness of the dangers that fireworks can cause. . In addition to the above analysis, we&#39;ll take a look into sales data for all US states for the last five years (2016-2021). . Summary of Results . Age group of 0-20 showed the highest rate of injury. . . . Injuries to the hands, face, and eyes were the most common, while injuries to lower extremities were less common. . . . Missouri held the record for most spent on fireworks (over 250 million dollars over the past 5 years). . . . There was no significate correlation between the number of injuries in a year compared to the number of sales. . Import Libraries . # install libraries to save plotly images to disk %%capture !pip install kaleido !pip install plotly&gt;=4.0.0 !wget https://github.com/plotly/orca/releases/download/v1.2.1/orca-1.2.1-x86_64.AppImage -O /usr/local/bin/orca !chmod +x /usr/local/bin/orca !apt-get install xvfb libgtk2.0-0 libgconf-2- !pip install texthero . . import matplotlib.pyplot as plt import numpy as np import pandas as pd import plotly.express as px import seaborn as sns import texthero as hero from texthero import preprocessing from texthero import stopwords import warnings warnings.filterwarnings(&#39;ignore&#39;) . . [nltk_data] Downloading package stopwords to /root/nltk_data... [nltk_data] Unzipping corpora/stopwords.zip. . Import Firework Injury Datasets . # Import clean injury dataframe injury = &#39;https://github.com/drusho/fireworks_data_exploration/raw/main/data/data_clean/df_injury_clean.csv&#39; df_injury = pd.read_csv(injury,usecols=[1,2,3,4,5,6,7,8,9,10]) df_injury.head(3) . Treatment_Date Age Sex Alcohol Drug Narrative Incident Locale Body_Part Diagnosis Disposition . 0 1/1/16 | 39 | Male | NaN | NaN | 39YOM WAS LIGHTING BOTTLE ROCKETS AND ONE FLEW... | Home | Eyeball | Contusions, Abrasions | Treated/Untreated and Released | . 1 1/1/16 | 13 | Male | NaN | NaN | 13YOM SOMEONE POINTED FIREWORKS AT HIM FROM 10... | Home | Eyeball | Contusions, Abrasions | Treated/Untreated and Released | . 2 7/5/16 | 31 | Female | NaN | NaN | A 31YOF WAS STRUCK TO EYE WITH PIECE OF FIRECR... | Home | Eyeball | Contusions, Abrasions | Treated/Untreated and Released | . . Time Series Analysis of Injuries (Scatter Plot) . July 4th firework celebrations are the clear winner in number of firework related injuries. . #Time Series Analysis of Injuries (Scatter Plot) #groupby treatment injury_dates = df_injury.groupby(&#39;Treatment_Date&#39;).count().reset_index() injury_dates = injury_dates.rename(columns={&#39;Age&#39;:&#39;Count&#39;}) fig = px.scatter(injury_dates, x=&quot;Treatment_Date&quot;, y=&quot;Count&quot;) fig.update_layout({&quot;plot_bgcolor&quot;:&quot;rgba(255,255,255, 0.9)&quot;}, title={&#39;text&#39;: &quot;Firework Injury Counts by Date&quot;, &#39;y&#39;:.98, &#39;x&#39;:.5, &#39;xanchor&#39;: &#39;center&#39;, &#39;yanchor&#39;: &#39;top&#39;}, xaxis=dict(title=&#39;Date of Injury&#39;), yaxis=dict(title=&#39;Injury Counts&#39;)) fig.update_traces(marker_color=&#39;#1f77b4&#39;) fig.show() . . . . Narrative Column Word Frequency (Bar Plot) . The Narrative column contains a detailed description of each injury reported. . Notice how the body parts &#39;hand&#39;, &#39;eye&#39;, and &#39;face&#39; make the list. . #create a custom cleaning pipeline custom_pipeline = [preprocessing.fillna , preprocessing.lowercase , preprocessing.remove_digits , preprocessing.remove_punctuation , preprocessing.remove_diacritics #, preprocessing.remove_stopwords , preprocessing.remove_whitespace] # , preprocessing.stem] #pass the custom_pipeline to the pipeline argument df_injury[&#39;clean_nar&#39;] = hero.clean(df_injury[&#39;Narrative&#39;], pipeline = custom_pipeline) #add a list of stopwords to the stopwords default_stopwords = stopwords.DEFAULT #Call remove_stopwords and pass the custom_stopwords list custom_stopwords = default_stopwords.union(set([&quot;&#39;&quot;,&quot;I&quot;,&quot;r&quot;,&quot;dx&quot;,&quot;i&quot;,&quot;l&quot;,&quot;yom&quot;,&quot;yow&quot;,&quot;pt&quot;,&quot;type&quot;,&quot;p&quot;,&quot;w&quot;])) df_injury[&#39;clean_nar&#39;] = hero.remove_stopwords(df_injury[&#39;clean_nar&#39;], custom_stopwords) tw = hero.visualization.top_words(df_injury[&#39;clean_nar&#39;]).head(20).reset_index() fig = px.bar(tw, x=&#39;index&#39;, y=&#39;clean_nar&#39;, orientation=&#39;v&#39;) fig.update_layout({&quot;plot_bgcolor&quot;:&quot;rgba(255,255,255, 0.9)&quot;}, title={&#39;text&#39;: &quot;Word Frequency for Injury Reports (2016-2021)&quot;, &#39;y&#39;:.98, &#39;x&#39;:.5, &#39;xanchor&#39;: &#39;center&#39;, &#39;yanchor&#39;: &#39;top&#39;}, xaxis=dict(title=&#39;&#39;), yaxis=dict(title=&#39;Word Counts&#39;)) fig.update_traces(marker_color=&#39;#1f77b4&#39;) fig.show() . . . . Wordcloud of Injury Report (2016-2021) . Words are taken from the Narrative column and are narrowed down to the top 200 words. . Looking at this wordcloud I get the idea that the initial lighting of fireworks is when a lot of injuries occur. . #Wordcloud from Narrative column using hero hero.wordcloud(df_injury[&#39;clean_nar&#39;], max_words=200,contour_color=&#39;&#39;, background_color=&#39;white&#39;,colormap=&#39;Blues&#39;, height = 500,width=800) . . Counting Drug and Alchol Use . The number of people injuried with positive results for drug or alcohol use was very insignificant compared to overall count of injuries. . Drug and Alcohol Usuage (Bar Plot) . #define figure size sns.set(rc={&quot;figure.figsize&quot;:(15, 6)}) #set background to white sns.set_style(&quot;white&quot;) fig, ax = plt.subplots(1,2) sns.countplot(df_injury[&#39;Drug&#39;], ax=ax[0], palette=&quot;Oranges_r&quot;) ax[0].set_title(&#39;Drug Related Incidents&#39;, fontdict = {&#39;fontsize&#39;: 15}) ax[0].set(ylabel=&#39;Counts&#39;, xlabel=&#39;&#39;) sns.countplot(df_injury[&#39;Alcohol&#39;], ax=ax[1], palette=&quot;Blues_r&quot;) ax[1].set_title(&#39;Alcohol Related Incidents&#39;, fontdict = {&#39;fontsize&#39;: 15}) ax[1].set(ylabel=&#39;&#39;, xlabel=&#39;&#39;) # remove spines sns.despine(left=True) #save to png # fig.savefig(&quot;Drug/Alcohol Counts.png&quot;) plt.show() fig.savefig(&#39;Drug_and_Alcohol_Counts.png&#39;) plt.show() . . Incident Counts by Year (Bar Plot) . The most injuries occured in 2020, which also saw its largest increase in firework sales. This correlation doesn&#39;t seem to match prior years. . # Incident Counts by Year BarGraph #define figure size sns.set(rc = {&quot;figure.figsize&quot;:(12,8)}) #set background to white sns.set_style(&quot;white&quot;) treamentDates = df_injury[&#39;Treatment_Date&#39;].dt.year.value_counts().sort_index().reset_index() ax = sns.barplot(y=&quot;Treatment_Date&quot;, x=&quot;index&quot;, data=treamentDates, palette=&quot;Blues&quot;) #set x,y labels ax.set(xlabel=&#39;&#39;, ylabel=&#39;Incident Counts&#39;) #set titles ax.set_title(&#39;Firework Injury Counts by Year&#39;, fontdict = {&#39;fontsize&#39;: 15}) #remove spiens sns.despine(left=True) #save to png ax.figure.savefig(&quot;Firework Injury Counts by Year.png&quot;) plt.show() . . Incident Counts by Gender (Bar Plot) . # Incident Counts by Sex incidentSex = df_injury[&#39;Sex&#39;].value_counts().reset_index(name=&#39;incidents&#39;) #define figure size sns.set(rc={&quot;figure.figsize&quot;:(12, 8)}) #set background to white sns.set_style(&quot;white&quot;) ax = sns.barplot(x=&quot;incidents&quot;, y=&quot;index&quot;, data=incidentSex, palette=&quot;Blues_r&quot;) #set x,y labels ax.set(xlabel=&#39;&#39;, ylabel=&#39;Injury Counts&#39;) #set titles ax.set_title(&#39;Firework Injury Counts by Gender (2016-2020)&#39;, fontdict = {&#39;fontsize&#39;:15}) #remove spines sns.despine(left=True) #save to png ax.figure.savefig(&quot;Firework Injury Counts by Gender.png&quot;) plt.show() . . Incident Counts by Body Part (Bar Plot) . The body parts listed also match the body parts mentioned in word frequency count of narratives. . # Incident Counts by Body Part #define figure size sns.set(rc={&quot;figure.figsize&quot;:(12,8)}) #set background color sns.set_style(&quot;white&quot;) incidentBp = df_injury[&#39;Body_Part&#39;].value_counts().reset_index(name=&#39;incidents&#39;).head(23) ax = sns.barplot(x=&quot;incidents&quot;, y=&quot;index&quot;, data=incidentBp, palette=&quot;Blues_r&quot;) #set x,y labels ax.set(xlabel=&#39;&#39;, ylabel=&#39;&#39;) #set title ax.set_title(&#39;Firework Injury Counts by Body Part (2016-2020)&#39;, fontdict = {&#39;fontsize&#39;:15}) #remove spines sns.despine(left=True) #save to png ax.figure.savefig(&quot;Incident Counts by Body Part.png&quot;) plt.show() . . Age Groups (Histogram) . Details The histogram below shows that the majority of firework related injuries that were reported occured with indivuals under the age of 40. The largest grouping belonged to individuals under the age of 20, which is also below the legal drinking age in the US. # Histogram of Ages #set figsize sns.set(rc={&quot;figure.figsize&quot;:(8, 8)}) #set background color sns.set_style(&quot;white&quot;) ax = sns.histplot(data=df_injury, x=&#39;Age_Fix&#39;, bins=5) #set x,y labels ax.set(xlabel=&#39;Age&#39;, ylabel=&#39;Counts&#39;) #set title ax.set_title(&#39;Firework Injury Counts by Age (2016-2020)&#39;, fontdict = {&#39;fontsize&#39;:15}) #remove spines sns.despine(left=True) #save to png ax.figure.savefig(&quot;Incident Counts by Age_Hist.png&quot;) plt.show() . . Incident Counts by Age (Bar Plot) . # Incident Counts by Age (Age_Fix) #define figure size sns.set(rc={&quot;figure.figsize&quot;:(30, 12)}) #set background color sns.set_style(&quot;white&quot;) incidentAge = df_injury[&#39;Age_Fix&#39;].value_counts().reset_index(name=&#39;incidents&#39;) ax = sns.barplot(y=&quot;incidents&quot;, x=&quot;index&quot;, data=incidentAge, palette=&quot;Blues_r&quot;) #set x,y labels ax.set(xlabel=&#39;Age&#39;, ylabel=&#39;Count&#39;) #set title ax.set_title(&#39;Firework Injury Counts by Age (2016-2020)&#39;, fontdict = {&#39;fontsize&#39;:30}) #remove spines sns.despine(left=True) #save to png ax.figure.savefig(&quot;Incident Counts by Age_Bar.png&quot;) plt.show() . . Firework Incident Counts by Age, Year, and Gender (Swarm Plot) . # Swarm graph by age, year, and gender #define figure size sns.set(rc={&quot;figure.figsize&quot;:(14,10)}) #set background color sns.set_style(&quot;white&quot;) ax = sns.swarmplot(data = df_injury, x = df_injury[&#39;Treatment_Date&#39;].dt.year, y = &quot;Age_Fix&quot;, hue = &quot;Sex&quot;, palette = &quot;Blues_r&quot;) #set x,y labels ax.set(xlabel = &#39;Year&#39;, ylabel = &#39;Age&#39;) #set title ax.set_title(&#39;Firework Injury Counts by Age&#39;, fontdict = {&#39;fontsize&#39;:18}) #remove spines sns.despine(left=True) #save to png ax.figure.savefig(&quot;Incident Counts by Age_Swarm.png&quot;) plt.show() . . Incident Counts by Diagnosis (Bar Plot) . Most injuries were from burns. Combining this information with the analysis above on injuries to body parts (eyes, face, and hands) provides a clear picture of how severe these burn injuries are to people involved. . # Incident Counts by Diagnosis incidentDia = df_injury[&#39;Diagnosis&#39;].value_counts().reset_index(name=&#39;incidents&#39;).head(10) #define figure size sns.set(rc={&quot;figure.figsize&quot;:(14,10)}) #set background color sns.set_style(&quot;white&quot;) ax = sns.barplot(x = &quot;incidents&quot;, y = &quot;index&quot;, data = incidentDia, palette = &quot;Blues_r&quot;) #set x,y labels ax.set(xlabel = &#39;&#39;, ylabel = &#39;&#39;) #set title ax.set_title(&#39;Firework Injury Counts by Diagnosis (2016-2020)&#39;, fontdict = {&#39;fontsize&#39;:18}) #remove spine sns.despine(left=True) # #set y axis labels (shortened longer labels to fit for print out) # ax.set_yticklabels([&#39;Burns&#39;, &#39;Contusions&#39;, &#39;Abrasions&#39;,&#39;Other/Not Stated&#39;, # &#39;Laceration&#39;,&#39;Fracture&#39;,&#39;Amputation&#39;,&#39;Foreign body&#39;, # &#39;Internal organ&#39;,&#39;Strain or Sprain&#39;,&#39;Avulsion&#39;, # &#39;Anoxia&#39;,&#39;Puncture&#39;,&#39;Poisoning&#39;,&#39;Dermatitis&#39;, &#39;Conjunctivitis&#39;, # &#39;Concussions&#39;,&#39;Hematoma&#39;]) #save to png ax.figure.savefig(&quot;Incident Counts by Diagnosis.png&quot;) plt.show() . . Import Firework Sales Data (State) . sales_state = &#39;https://github.com/drusho/fireworks_data_exploration/raw/main/data/data_raw/State%20Imports%20by%20HS%20Commodities.csv&#39; df_sales_st = pd.read_csv(sales_state,skiprows=4,usecols=[0,1,2,3]) df_sales_st.head() . . State Commodity Time Total Value ($US) . 0 Alabama | 360410 Fireworks | 2016 | 29,602,090 | . 1 Alabama | 360410 Fireworks | 2017 | 19,396,430 | . 2 Alabama | 360410 Fireworks | 2018 | 26,399,895 | . 3 Alabama | 360410 Fireworks | 2019 | 28,353,392 | . 4 Alabama | 360410 Fireworks | 2020 | 23,141,950 | . Web Scraping for State Abbreviations . The dataframe was missing state abbreviations that are needed to plot data onto a map using Plotly. Used pandas function &#39;read_hml&#39; to read tables from a website that contained state and state abbreviation data. . #WebScrap State Abbreviations #scrap state names and abbrev states_abrev = pd.read_html(&#39;https://abbreviations.yourdictionary.com/articles/state-abbrev.html&#39;)[0].iloc[1:,:2] #scrap US territory names and abbrev territories = pd.read_html(&#39;https://abbreviations.yourdictionary.com/articles/state-abbrev.html&#39;)[1].iloc[[2,5],:2] #merge dfs st_at = states_abrev.merge(territories,how=&#39;outer&#39;).sort_values(by=0).reset_index(drop=True) #rename cols st_at.rename(columns={0:&#39;State&#39;,1:&#39;Abbrevation&#39;},inplace=True) st_at.head() . . State Abbrevation . 0 Alabama | AL | . 1 Alaska | AK | . 2 Arizona | AZ | . 3 Arkansas | AR | . 4 California | CA | . Merging State Abbreviations with Master Dataframe . #merge abbrevation with state sales data df_sales_st2 = df_sales_st.merge(st_at,how=&#39;inner&#39;) df_sales_st2.head() . . State Commodity Time Total Value ($US) Abbrevation . 0 Alabama | 360410 Fireworks | 2016 | 29,602,090 | AL | . 1 Alabama | 360410 Fireworks | 2017 | 19,396,430 | AL | . 2 Alabama | 360410 Fireworks | 2018 | 26,399,895 | AL | . 3 Alabama | 360410 Fireworks | 2019 | 28,353,392 | AL | . 4 Alabama | 360410 Fireworks | 2020 | 23,141,950 | AL | . Top Sales per State (Bar Plot) . # Visualization State Sales (Bar Plot) st_sales = df_sales_st2.copy() st_sales = st_sales.groupby(&#39;State&#39;)[&#39;Total Value ($US)&#39;].sum().reset_index(name=&#39;Sales&#39;).sort_values(by=&#39;Sales&#39;,ascending=False).reset_index(drop=True).head(20) st_sales.sort_values(by=&#39;Sales&#39;,ascending=True,inplace=True) fig = px.bar(st_sales, y=&#39;State&#39;, x=&#39;Sales&#39;, orientation=&#39;h&#39;, color_continuous_scale=&#39;Blues&#39;, color=&quot;Sales&quot;) fig.update_layout({&quot;plot_bgcolor&quot;:&quot;rgba(255,255,255, 0.9)&quot;}, title={&#39;text&#39;: &quot;Firework Total Sales ($USD) 2016-2020&quot;, &#39;y&#39;:.98, &#39;x&#39;:.5, &#39;xanchor&#39;: &#39;center&#39;, &#39;yanchor&#39;: &#39;top&#39;}) fig.show() # # save fig to image # fig.write_image(&quot;Total Firework Sales ($USD) 2016-2020.png&quot;, width=1980, height=1080) # fig.write_html(&quot;Total Firework Sales ($USD) 2016-2020.html&quot;) . . . . State Sales (Scatter Plot) . Note Plotly currently does not have the ability to position colorscales to horizontal. # Visualization State Sales (Scatter Plot) df_sales_st2.sort_values(by=&#39;State&#39;,ascending=False,inplace=True) fig = px.scatter(df_sales_st2, y=&quot;State&quot;, x=&quot;Time&quot;, color=&quot;Total Value ($US)&quot;, size=&#39;Total Value ($US)&#39;, width=800, height=1100, color_continuous_scale=&#39;Blues&#39;) #change background and legend background to white fig.update_layout({&quot;plot_bgcolor&quot;:&quot;rgba(255,255,255, 0.9)&quot;}, # &quot;paper_bgcolor&quot;: &quot;rgba(255,255,255, 0.9)&quot;}, title={&#39;text&#39;: &quot;Firework Sales ($USD)&quot;, &#39;y&#39;:.98, &#39;x&#39;:.5,&#39;xanchor&#39;:&#39;center&#39;, &#39;yanchor&#39;: &#39;top&#39;}, xaxis=dict(title=&#39;&#39;), yaxis=dict(title=&#39;&#39;)) fig.show() # save fig to image fig.write_image(&quot;Firework Sales ($USD) (scatter_plot).png&quot;, width=800, height=1000) fig.write_html(&quot;Firework Sales ($USD) (scatter_plot).html&quot;) . . . . State Sales (Heatmap Plot of US) . fig = px.choropleth(df_sales_st2, # Input Pandas DataFrame locations=&quot;Abbrevation&quot;, # DataFrame column with locations color=&quot;Total Value ($US)&quot;, # DataFrame column with color values hover_name=&quot;Abbrevation&quot;, # DataFrame column hover info locationmode = &#39;USA-states&#39;, # Set to plot as US States color_continuous_scale=&#39;Blues&#39;) fig.update_layout( title={ &#39;text&#39;: &quot;Firework Total Sales ($USD) 2016-2020&quot;, &#39;y&#39;:.95, &#39;x&#39;:.5, &#39;xanchor&#39;: &#39;center&#39;, &#39;yanchor&#39;: &#39;top&#39;}, geo_scope=&#39;usa&#39;) # Plot only the USA instead of globe fig.show() # save fig to image fig.write_image(&quot;Total State Firework Sales ($USD) 2016-2020 (map).png&quot;, width=1980, height=1080) fig.write_html(&quot;Total State Firework Sales ($USD) 2016-2020 (map).html&quot;) . . . . Comparing Sales and Injury Reports . Total Sales Groupby Year . # Total Sales groupby Year sales_year = df_sales_st2.groupby(df_sales_st2[&#39;Time&#39;].dt.year).sum().reset_index(drop=False) sales_year.rename(columns={&#39;Time&#39;:&#39;Year&#39;,&#39;Total Value ($US)&#39;:&#39;Sales&#39;},inplace=True) sales_year . . Year Sales . 0 2016 | 307825710 | . 1 2017 | 279962808 | . 2 2018 | 331072715 | . 3 2019 | 320021354 | . 4 2020 | 300987616 | . 5 2021 | 157186415 | . Total Injuries Groupby Year . # df_injury.groupby([&#39;Treatment_Date&#39;] df_injury_count = df_injury.groupby(df_injury[&#39;Treatment_Date&#39;].dt.year)[&#39;Age&#39;].count().reset_index(name=&#39;Count&#39;) df_injury_count.rename(columns={&#39;Treatment_Date&#39;:&#39;Year&#39;},inplace=True) df_injury_count . . Year Count . 0 2016 | 268 | . 1 2017 | 329 | . 2 2018 | 234 | . 3 2019 | 261 | . 4 2020 | 440 | . Merging Sales and Injury DataFrame on Year . # Merge sales and injury dfs on year df_merged = sales_year.merge(df_injury_count,how=&#39;left&#39;) df_merged . . Year Sales Count . 0 2016 | 307825710 | 268.0 | . 1 2017 | 279962808 | 329.0 | . 2 2018 | 331072715 | 234.0 | . 3 2019 | 320021354 | 261.0 | . 4 2020 | 300987616 | 440.0 | . 5 2021 | 157186415 | NaN | . Determining Correlation of New DataFrame . # Correlation df_merged.corr() . . Year Sales Count . Year 1.000000 | -0.585906 | 0.529818 | . Sales -0.585906 | 1.000000 | -0.590087 | . Count 0.529818 | -0.590087 | 1.000000 | . Conclusion . Injuries . Age groups of 0-20 showed the highest rate of injury. Injury rates by age decrease with age tend to slowly decrease after age 20. The 60+ age groups showed the lowest rate of injury. . Injuries to the hands, face, and eyes were the most common, while injuries to lower extremities were less common. This is reflected numerous times in the data, such as with word frequency of injury narratives, where an explanation is given for how a person was injured. . Time series analysis showed that the month of July has the highest frequency of firework related injuries. . Sales . Missouri held the record for most spent on fireworks (over 250 million dollars over the past 5 years). For comparison, Alaska spent around 560,000 dollars in the last five years. Sales for fireworks saw a considerable increase in sales during 2020, most likely due to COVID-19. . Correlation Between Sales and Injury Counts . There was no significate correlation between the number of injuries in a year compared to the number of sales. . Ending Remarks . Never hold fireworks while lighting them, and hand, eye, and face protection should be worn at all times when fireworks are nearby fireworks. This is especially true if you are a male below the age of 21. . Tools Used . Matplotlib | Pandas | Plotly | Seaborn | Resources . Consumer Product Safety Commision . | USA Trade Census . | National Fire Protection Association: Fireworks fires and injuries . | Source Details Source 1 consisted multiple excel incident reports involving fireworks over the past 5 years taken from the U.S. Consumer Product Safety Commission (CPSC). The NEISS injury data are gathered from the emergency departments (ED) of 96 hospitals selected as a probability sample of all U.S. hospitals with 24-hour EDs and at least 6 inpatient beds. Each participating NEISS hospital is hand-selected by CPSC because it provides an important representation of all other hospitals of its size and unique characteristics in the U.S. Source 2 conatins Sales and Trade data for each state regarding fireworks. Reports data range from 2016 to April 2021.",
            "url": "https://drusho.github.io/pandas/plotly/seaborn/2021/07/03/firework-part-2-eda.html",
            "relUrl": "/pandas/plotly/seaborn/2021/07/03/firework-part-2-eda.html",
            "date": " • Jul 3, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "My name is David Rusho. I have a passion for using data to tell stories and discover meaningful insights. I started programming almost accidentally while looking for methods to automate repetitive tasks at work. I am an advanced spreadsheet formulas user and found that transitioning to writing code in python was a natural next step in my data science journey. . Currently, I’m based out of Orlando, FL, where I am currently enrolled in an MS Data Analytics (Big Data) program at the University of Central Florida. When I’m not programming or reading about Data Science, you can usually find me playing with photography, practicing yoga, or learning to cook Korean/Indian food. .",
          "url": "https://drusho.github.io/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Dashboards",
          "content": ". Tableau . . World COVID-19 Tracking Dashboard (12/2019 - 06/2020) . | US Firework Injuries (2016-2021) Dashboard | Florida Schools (2020-2021) COVID-19 Dashboard |",
          "url": "https://drusho.github.io/dashboards/",
          "relUrl": "/dashboards/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Home",
          "content": "",
          "url": "https://drusho.github.io/",
          "relUrl": "/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://drusho.github.io/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}
{
  
    
        "post0": {
            "title": "Data Analysis of /r/Politics Subreddit",
            "content": "Goals of Project . The purpose of this project was to practice using APIs to scrape data from the web. For this project Reddit&#39;s subreddit &#39;politics&#39; was used since it has a large amount of participation and userbase. Some additional goals for the project included: . Finding the top posts by score | Does a high score correlate with a high number of comments | Popular words that are useed in titles | Semantics analysis of posts and determine if they are negative, positive, or neutral? | . Tools Used: . Pandas: organized data and create dataframes | Plotly: create interactive charts/visualizations | Praw: scrape reddit subs | Texthero: provide semantic analysis of post titles | . pip install praw . . pip install vaderSentiment . . pip install texthero . . from configparser import ConfigParser import datetime as dt import matplotlib.pyplot as plt import pandas as pd import plotly.graph_objects as go import praw import texthero as herofrom from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer . . reddit = praw.Reddit(client_id=login[&#39;cid&#39;], client_secret=login[&#39;csec&#39;], user_agent=login[&#39;ua&#39;], check_for_async=False) . . Sample of reddit posts from /r/poltics out of 500 posts . posts = [] # select a subreddit to scrape sub = &#39;politics&#39; # return 500 new posts new_bets = reddit.subreddit(sub).hot(limit=500) # return selected reddit post attributes for post in new_bets: posts.append([post.title, post.selftext, post.score, post.upvote_ratio, post.num_comments, post.created_utc, post.is_original_content, post.url]) # create df, rename columns, and make dtype for all data a str posts = pd.DataFrame(posts, columns=[&#39;title&#39;, &#39;post&#39;, &#39;score&#39;, &#39;upvote_ratio&#39;, &#39;comments&#39;, &#39;created&#39;, &#39;original_content&#39;, &#39;url&#39;], dtype=&#39;str&#39;) posts.sample(3) . title post score upvote_ratio comments created original_content url . 306 People fleeing New York and New Jersey for the... | | 110 | 0.93 | 28 | 1618653755.0 | False | https://www.inquirer.com/politics/pennsylvania... | . 273 60 years after the Bay of Pigs invasion, many ... | | 138 | 0.86 | 46 | 1618669266.0 | False | https://www.cnn.com/2021/04/17/politics/bay-of... | . 276 Alleged sex trafficking victim may be cooperat... | | 923 | 0.98 | 55 | 1618629552.0 | False | https://thehill.com/homenews/house/548800-alle... | . # return 500 new posts new_bets = reddit.subreddit(sub).hot(limit=500) # return selected reddit post attributes for post in new_bets: posts.append([post.title, post.selftext, post.score, post.upvote_ratio, post.num_comments, post.created_utc, post.is_original_content, post.url]) # create df, rename columns, and make dtype for all data a str posts = pd.DataFrame(posts, columns=[&#39;title&#39;, &#39;post&#39;, &#39;score&#39;, &#39;upvote_ratio&#39;, &#39;comments&#39;, &#39;created&#39;, &#39;original_content&#39;, &#39;url&#39;], dtype=&#39;str&#39;) posts.sample(3) . . Column Descriptions . Heading Description . title | The title of the submission. | . post | The submissions’ selftext - an empty string if a link post. | . score | The number of upvotes for the submission. | . upvote_ratio | The percentage of upvotes from all votes on the submission. | . comments | The number of comments on the submission. | . created | Time the submission was created, represented in Unix Time. | . original_content | Whether or not the submission has been set as original content. | . url | The URL the submission links to, or the permalink if a selfpost. | . posts[&#39;created&#39;] = pd.to_datetime(posts[&#39;created&#39;], unit=&#39;s&#39;) posts[&#39;created&#39;].head(3) . 0 2021-04-13 15:09:23 1 2021-04-18 20:37:47 2 2021-04-18 21:40:39 Name: created, dtype: datetime64[ns] . # change dytpe of score and comments cols to int posts[[&#39;comments&#39;,&#39;score&#39;]] = posts[[&#39;comments&#39;,&#39;score&#39;]].astype(&#39;int&#39;) posts[&#39;upvote_ratio&#39;] = posts[&#39;upvote_ratio&#39;].astype(&#39;float&#39;) . . posts.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 500 entries, 0 to 499 Data columns (total 8 columns): # Column Non-Null Count Dtype -- -- 0 title 500 non-null object 1 post 500 non-null object 2 score 500 non-null int64 3 upvote_ratio 500 non-null float64 4 comments 500 non-null int64 5 created 500 non-null datetime64[ns] 6 original_content 500 non-null object 7 url 500 non-null object dtypes: datetime64[ns](1), float64(1), int64(2), object(4) memory usage: 31.4+ KB . posts[&#39;clean_title&#39;] = herofrom.clean(posts[&#39;title&#39;]) posts[&#39;clean_title&#39;].sample(10) . 477 gop donors hobnobbing person dems sticking zoom 221 observer view joe biden&#39; sanctions russia 227 treatment ban creates uncertainty trans youth ... 264 &#39;comically evil&#39; marjorie taylor greene lauren... 123 criticism biden says raise u cap refugee admis... 388 feds rescind health care funding agreement wou... 82 indianapolis shooting red flag never flew 405 chicago mayor slams trash rumors indicates res... 172 ted cruz among small number republicans opposi... 2 bush calls congress tone harsh rhetoric immigr... Name: clean_title, dtype: object . # shorten post titles posts[&#39;short_clean_title&#39;] = posts.clean_title.str[:100]+ &#39;...&#39; . . Top 10 Popular posts based on score . top_posts = posts.groupby([&#39;title&#39;])[&#39;score&#39;,&#39;upvote_ratio&#39;].sum().sort_values(by=&#39;score&#39;,ascending=False).reset_index() top_posts[[&#39;score&#39;,&#39;upvote_ratio&#39;,&#39;title&#39;]].head(10) . /usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead. . score upvote_ratio title . 0 63001 | 0.87 | Mitch McConnell blocked the Ruth Bader Ginsbur... | . 1 57647 | 0.77 | There was Trump-Russia collusion — and Trump p... | . 2 55677 | 0.91 | Americans overwhelmingly say marijuana should ... | . 3 53364 | 0.89 | &#39;Completely Unreasonable&#39;: Dems Slam GOP Deman... | . 4 48970 | 0.90 | GOP Rep. Adam Kinzinger calls on party to expe... | . 5 47043 | 0.79 | John Kerry apologises for Donald Trump’s ‘rene... | . 6 45462 | 0.91 | ‘It’s long overdue’: Rep. Young breaks with GO... | . 7 39308 | 0.85 | GOP Rep. Lauren Boebert Blasted For Absurd Twe... | . 8 35346 | 0.91 | Republicans Who Voted to Impeach Trump Are Out... | . 9 34983 | 0.84 | AOC accuses Chicago prosecutor of ‘lying’ abou... | . Word cloud of top words from clean_title . herofrom.wordcloud(posts.clean_title,width = 500, height= 400,background_color=&#39;White&#39;) . tw = herofrom.visualization.top_words(posts[&#39;clean_title&#39;]).head(20).to_frame() tw.reset_index(inplace=True) tw.rename(columns={&#39;index&#39;:&#39;word&#39;,&#39;clean_title&#39;:&#39;freq&#39;},inplace=True) . . Top 25 Words From Post Titles . fig = go.Figure([go.Bar(x=tw.word, y=tw.freq,textposition=&#39;auto&#39;)]) fig.update_layout( title={ &#39;text&#39;: &quot;Top 25 Words Found in /r/politics Post Titles&quot;, &#39;y&#39;:0.88, &#39;x&#39;:0.5, &#39;xanchor&#39;: &#39;center&#39;, &#39;yanchor&#39;: &#39;top&#39;}) fig.show() . . . Post Scores vs Comments . # Post Scores vs Comments fig = go.Figure(data=go.Scatter(x=posts.comments, y=posts.score, mode=&#39;markers&#39;, text=posts.title)) # hover text goes here fig.update_layout( title={ &#39;text&#39;: &quot;/r/politics Posts&#39; Scores vs Comments&quot;, &#39;y&#39;:0.88, &#39;x&#39;:0.5, &#39;xanchor&#39;: &#39;center&#39;, &#39;yanchor&#39;: &#39;top&#39;}, xaxis_title=&quot;Scores&quot;, yaxis_title=&quot;Comments&quot;,) fig.show() . . . . Sentiment Analysis of Post Titles . Scale for determining sentiment . positive: compound score&gt;=0.05 neutral: compound score between -0.05 and 0.05 negative: compound score&lt;=-0.05 . # for i in range(len(sentences)): # vs = analyzer.polarity_scores(sentences[i]) analyzer = SentimentIntensityAnalyzer() posts[&#39;neg&#39;] = posts[&#39;title&#39;].apply(lambda x:analyzer.polarity_scores(x)[&#39;neg&#39;]) posts[&#39;neu&#39;] = posts[&#39;title&#39;].apply(lambda x:analyzer.polarity_scores(x)[&#39;neu&#39;]) posts[&#39;pos&#39;] = posts[&#39;title&#39;].apply(lambda x:analyzer.polarity_scores(x)[&#39;pos&#39;]) posts[&#39;compound&#39;] = posts[&#39;title&#39;].apply(lambda x:analyzer.polarity_scores(x)[&#39;compound&#39;]) posts.sample(3) . title post score upvote_ratio comments created original_content url clean_title short_clean_title neg neu pos compound . 416 Biden Administration Says Russian Intelligence... | | 4289 | 0.97 | 113 | 2021-04-16 01:01:19 | False | https://www.nytimes.com/2021/04/15/us/politics... | biden administration says russian intelligence... | biden administration says russian intelligence... | 0.0 | 0.721 | 0.279 | 0.4767 | . 438 Discussion Thread: Press Secretary Jen Psaki H... | White House Press Secretary Jen Psaki briefs r... | 232 | 0.95 | 134 | 2021-04-16 14:53:33 | False | https://www.reddit.com/r/politics/comments/ms4... | discussion thread press secretary jen psaki ho... | discussion thread press secretary jen psaki ho... | 0.0 | 1.000 | 0.000 | 0.0000 | . 134 Garland rescinds Trump-era restrictions on fed... | | 11243 | 0.99 | 188 | 2021-04-17 14:58:27 | False | https://www.latimes.com/politics/story/2021-04... | garland rescinds trump era restrictions federa... | garland rescinds trump era restrictions federa... | 0.0 | 1.000 | 0.000 | 0.0000 | . fig = go.Figure(data=go.Scatter(x=posts.compound, y=posts.score, mode=&#39;markers&#39;, text=posts.title)) # hover text goes here fig.update_layout( title={ &#39;text&#39;: &quot;/r/politics Posts&#39; Scores vs Comments&quot;, &#39;y&#39;:0.88, &#39;x&#39;:0.5, &#39;xanchor&#39;: &#39;center&#39;, &#39;yanchor&#39;: &#39;top&#39;}, xaxis_title=&quot;Compound Sentiment Score&quot;, yaxis_title=&quot;Scores&quot;,) fig.show() . . . Project Resources . Helpful resources that were used to complete this project. . 1. * PRAW: The Python Reddit API Wrapper . One of the main resources for project was prawn documentation.↩ . . 1. * Ultimate Beginners Guide to Collecting Text for Natural Language Processing (NLP) with Python — Twitter, Reddit, Genius and More Collect Text through APIs and Web Scraping . by Eric Kleppen . This article was a good resource for learning how to use prawn for scraping Reddit.↩ . &lt;/div&gt; . . 1. * How to scrape Reddit with Python . by Felippe Rodrigues . None of the code from this resource was used, but it was a useful resource for looking at different methods for achieving the same results layed out in Eric Kleppen article.↩ . &lt;/div&gt; . . 1. * Try TextHero: The Absolute Simplest way to Clean and Analyze Text in Pandas . Natural Language Processing (NLP) made easy for Python . Posted on July 2020, By: Eric Kleppen↩ . . 1. * How to Use Texthero to Prepare a Text-based Dataset for Your NLP Project . Posted on Aug. 2020, By: Davis David↩ . . 1. * How to Run Sentiment Analysis in Python using VADER . Posted on October 11, 2020 by George Pipis . This post provided a great explaination of Vader Sentiment Analysis and a descriptive breakdown of neg, pos, neu, and compound categories.↩ . . 1. * How to read and write configuration (.ini) file in python . Used this post to understand the basics of creating an init file in order to save login information without having to write it into your python code/notebook. Makes it much easier to share code without have to worry about giving out username/passwords to the world.↩ . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; .",
            "url": "https://drusho.github.io/blog/2021/06/20/Reddit-Politics-Analysis.html",
            "relUrl": "/2021/06/20/Reddit-Politics-Analysis.html",
            "date": " • Jun 20, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://drusho.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "",
          "url": "https://drusho.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Blog",
          "content": "",
          "url": "https://drusho.github.io/blog/",
          "relUrl": "/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://drusho.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}